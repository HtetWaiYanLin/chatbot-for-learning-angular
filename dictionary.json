{
  "ahead-of-time-aot-compilation": "You can compile Angular applications at build-time. By compiling your application using the compiler-cli, ngc, you can bootstrap directly to a module factory, meaning you don't need to include the Angular compiler in your JavaScript bundle. Ahead-of-time compiled applications also benefit from decreased load time and increased performance.",
  "angular-module": "Helps you organize an application into cohesive blocks of functionality. An Angular module identifies the components, directives, and pipes that the application uses along with the list of external Angular modules that the application needs, such as FormsModule. Every Angular application has an application root module class. By convention, the class is called AppModule and resides in a file named app.module.ts. For details and examples, see the Angular Module page.",
  "annotation": "In practice, a synonym for Decoration.",
  "attribute-directive": "A category of directive that can listen to and modify the behavior of other HTML elements, attributes, properties, and components. They are usually represented as HTML attributes, hence the name. A good example of an attribute directive is the ngClass directive for adding and removing CSS class names.",
  "barrel": "A barrel is a way to rollup exports from several ES2015 modules into a single convenient ES2015 module. The barrel itself is an ES2015 module file that re-exports selected exports of other ES2015 modules. Imagine three ES2015 modules in a heroes folder: // heroes/hero.component.ts export class HeroComponent {} // heroes/hero.model.ts export class Hero {} // heroes/hero.service.ts export class HeroService {}Without a barrel, a consumer would need three import statements: import { HeroComponent } from '../heroes/hero.component.ts'; import { Hero } from '../heroes/hero.model.ts'; import { HeroService } from '../heroes/hero.service.ts';You can add a barrel to the heroes folder (called index, by convention) that exports all of these items: export * from './hero.model.ts'; // re-export all of its exports export * from './hero.service.ts'; // re-export all of its exports export { HeroComponent } from './hero.component.ts'; // re-export the named thingNow a consumer can import what it needs from the barrel. import { Hero, HeroService } from '../heroes'; // index is impliedThe Angular scoped packages each have a barrel named index. Note that you can often achieve this using Angular modules instead.",
  "binding": "Almost always refers to Data Binding and the act of binding an HTML object property to a data object property. May refer to a dependency injection binding between a \"token\", also referred to as a \"key\", and a dependency provider. This more rare usage should be clear in context.",
  "bootstrap": "You launch an Angular application by \"bootstrapping\" it using the application root Angular module (AppModule). Bootstrapping identifies an application's top level \"root\" component, which is the first component that is loaded for the application. For more information, see the Setup page. You can bootstrap multiple apps in the same index.html, each with its own top level root.",
  "camelcase": "The practice of writing compound words or phrases such that each word or abbreviation begins with a capital letter except the first letter, which is lowercase. Function, property, and method names are typically spelled in camelCase. Examples include: square, firstName and getHeroes. Notice that square is an example of how you write a single word in camelCase. This form is also known as lower camel case, to distinguish it from upper camel case, which is PascalCase. When you see \"camelCase\" in this documentation it always means lower camel case.",
  "component": "An Angular class responsible for exposing data to a view and handling most of the view’s display and user-interaction logic. The component is one of the most important building blocks in the Angular system. It is, in fact, an Angular directive with a companion template. You apply the @Component decorator to the component class, thereby attaching to the class the essential component metadata that Angular needs to create a component instance and render it with its template as a view. Those familiar with \"MVC\" and \"MVVM\" patterns will recognize the component in the role of \"controller\" or \"view model\".",
  "dash-case": "The practice of writing compound words or phrases such that each word is separated by a dash or hyphen (-). This form is also known as kebab-case. Directive selectors (like my-app) and the root of filenames (such as hero-list.component.ts) are often spelled in dash-case.",
  "data-binding": "Applications display data values to a user and respond to user actions (clicks, touches, keystrokes). Instead of manually pushing application data values into HTML, attaching event listeners, pulling changed values from the screen, and updating application data values, you can use data binding by declaring the relationship between an HTML widget and data source and let the framework handle the details. Angular has a rich data binding framework with a variety of data binding operations and supporting declaration syntax.  Read about the forms of binding in the Template Syntax page:  Interpolation. Property binding. Event binding. Attribute binding. Class binding. Style binding. Two-way data binding with ngModel.",
  "decorator-decoration": "A decorator is a function that adds metadata to a class, its members (properties, methods) and function arguments. Decorators are a JavaScript language feature, implemented in TypeScript and proposed for ES2016 (AKA ES7). To apply a decorator, position it immediately above or to the left of the thing it decorates. Angular has its own set of decorators to help it interoperate with your application parts. Here is an example of a @Component decorator that identifies a class as an Angular component and an @Input decorator applied to the name property of that component. The elided object argument to the @Component decorator would contain the pertinent component metadata. @Component({...}) export class AppComponent { constructor(@Inject('SpecialFoo') public foo:Foo) {} @Input() name:string; } The scope of a decorator is limited to the language feature that it decorates. None of the decorations shown here will \"leak\" to other classes appearing below it in the file. Always include parentheses () when applying a decorator.",
  "dependency-injection": "Dependency injection is both a design pattern and a mechanism for creating and delivering parts of an application to other parts of an application that request them. Angular developers prefer to build applications by defining many simple parts that each do one thing well and then wiring them together at runtime. These parts often rely on other parts. An Angular component part might rely on a service part to get data or perform a calculation. When part \"A\" relies on another part \"B\", you say that \"A\" depends on \"B\" and that \"B\" is a dependency of \"A\". You can ask a \"dependency injection system\" to create \"A\" for us and handle all the dependencies. If \"A\" needs \"B\" and \"B\" needs \"C\", the system resolves that chain of dependencies and returns a fully prepared instance of \"A\". Angular provides and relies upon its own sophisticated dependency injection system to assemble and run applications by \"injecting\" application parts into other application parts where and when needed. At the core there is an injector that returns dependency values on request. The expression injector.get(token) returns the value associated with the given token. A token is an Angular type (OpaqueToken). You rarely deal with tokens directly; most methods accept a class name (Foo) or a string (\"foo\") and Angular converts it to a token. When you write injector.get(Foo), the injector returns the value associated with the token for the Foo class, typically an instance of Foo itself. During many of its operations, Angular makes similar requests internally, such as when it creates a component for display. The Injector maintains an internal map of tokens to dependency values. If the Injector can't find a value for a given token, it creates a new value using a Provider for that token. A provider is a recipe for creating new instances of a dependency value associated with a particular token. An injector can only create a value for a given token if it has a provider for that token in its internal provider registry. Registering providers is a critical preparatory step. Angular registers some of its own providers with every injector. We can register our own providers. Read more in the Dependency Injection page.",
  "directive": "An Angular class responsible for creating, reshaping, and interacting with HTML elements in the browser DOM. Directives are Angular's most fundamental feature. A Directive is almost always associated with an HTML element or attribute. We often refer to such an element or attribute as the directive itself. When Angular finds a directive in an HTML template, it creates the matching directive class instance and gives the instance control over that portion of the browser DOM. You can invent custom HTML markup (for example, <my-directive>) to associate with your custom directives. You add this custom markup to HTML templates as if you were writing native HTML. In this way, directives become extensions of HTML itself. Directives fall into one of three categories:  Components that combine application logic with an HTML template to render application [views]. Components are usually represented as HTML elements. They are the building blocks of an Angular application and the developer can expect to write a lot of them.  Attribute directives that can listen to and modify the behavior of other HTML elements, attributes, properties, and components. They are usually represented as HTML attributes, hence the name.  Structural directives, a directive responsible for shaping or reshaping HTML layout, typically by adding, removing, or manipulating elements and their children.",
  "ecmascript": "The official JavaScript language specification. The latest approved version of JavaScript is ECMAScript 2016 (AKA \"ES2016\" or \"ES7\") and many Angular developers write their applications either in this version of the language or a dialect that strives to be compatible with it, such as TypeScript. Most modern browsers today only support the much older \"ECMAScript 5\" (AKA ES5) standard. Applications written in ES2016, ES2015 or one of their dialects must be \"transpiled\" to ES5 JavaScript. Angular developers may choose to write in ES5 directly.",
  "es2015": "Short hand for ECMAScript 2015.",
  "es6": "Short hand for ECMAScript 2015.",
  "es5": "Short hand for ECMAScript 5, the version of JavaScript run by most modern browsers. See ECMAScript.",
  "injector": "An object in the Angular dependency injection system that can find a named \"dependency\" in its cache or create such a thing with a registered provider.",
  "input": "A directive property that can be the target of a property binding (explained in detail in the Template Syntax page). Data values flow into this property from the data source identified in the template expression to the right of the equal sign. See the Input and output properties section of the Template Syntax page.",
  "interpolation": "A form of property data binding in which a template expression between double-curly braces renders as text. That text may be concatenated with neighboring text before it is assigned to an element property or displayed between element tags, as in this example. My current hero is {{hero.name}} Read more about interpolation in the Template Syntax page.",
  "just-in-time-jit-compilation": "With Angular just-in-time bootstrapping you compile your components and modules in the browser and launch the application dynamically. This is a good choice during development. Consider using the ahead-of-time mode for production apps.",
  "kebab-case": "See dash-case.",
  "lifecycle-hooks": "Directives and components have a lifecycle managed by Angular as it creates, updates, and destroys them. You can tap into key moments in that lifecycle by implementing one or more of the lifecycle hook interfaces. Each interface has a single hook method whose name is the interface name prefixed with ng. For example, the OnInit interface has a hook method named ngOnInit. Angular calls these hook methods in the following order:  ngOnChanges - when an input/output binding value changes. ngOnInit - after the first ngOnChanges. ngDoCheck - developer's custom change detection. ngAfterContentInit - after component content initialized. ngAfterContentChecked - after every check of component content. ngAfterViewInit - after component's view(s) are initialized. ngAfterViewChecked - after every check of a component's view(s). ngOnDestroy - just before the directive is destroyed.  Read more in the Lifecycle Hooks page.",
  "module": "In Angular, there are two types of modules:  Angular modules. For details and examples, see the Angular Modules page. ES2015 modules, as described in this section.  Angular apps are modular. In general, you assemble your application from many modules, both the ones you write and the ones you acquire from others. A typical module is a cohesive block of code dedicated to a single purpose. A module exports something of value in that code, typically one thing such as a class. A module that needs that thing, imports it. The structure of Angular modules and the import/export syntax is based on the ES2015 module standard. An application that adheres to this standard requires a module loader to load modules on request, and resolve inter-module dependencies. Angular does not ship with a module loader and does not have a preference for any particular 3rd party library (although most examples use SystemJS). You may pick any module library that conforms to the standard. Modules are typically named after the file in which the exported thing is defined. The Angular DatePipe class belongs to a feature module named date_pipe in the file date_pipe.ts. You rarely access Angular feature modules directly. You usually import them from one of the Angular scoped packages such as @angular/core.",
  "observable": "You can think of an observable as an array whose items arrive asynchronously over time. Observables help you manage asynchronous data, such as data coming from a backend service. Observables are used within Angular itself, including Angular's event system and its http client service. To use observables, Angular uses a third-party library called Reactive Extensions (RxJS). Observables are a proposed feature for ES 2016, the next version of JavaScript.",
  "output": "A directive property that can be the target of event binding. Events stream out of this property to the receiver identified in the template expression to the right of the equal sign. See the Input and output properties section of the Template Syntax page.",
  "pascalcase": "The practice of writing individual words, compound words, or phrases such that each word or abbreviation begins with a capital letter. Class names are typically spelled in PascalCase. Examples include: Person and HeroDetailComponent. This form is also known as upper camel case to distinguish it from lower camel case, which is simply called camelCase. In this documentation, \"PascalCase\" means upper camel case and \"camelCase\" means lower camel case.",
  "pipe": "An Angular pipe is a function that transforms input values to output values for display in a view. Use the @Pipe decorator to associate the pipe function with a name. You then use that name in your HTML to declaratively transform values on screen. Here's an example that uses the built-in currency pipe to display a numeric value in the local currency. Price: {{product.price | currency}}Read more in the page on pipes.",
  "provider": "A provider creates a new instance of a dependency for the dependency injection system. It relates a lookup token to code—sometimes called a \"recipe\"—that can create a dependency value.",
  "reactive-forms": "A technique for building Angular forms through code in a component. The alternate technique is Template-Driven Forms. When building reactive forms:  The \"source of truth\" is the component. The validation is defined using code in the component. Each control is explicitly created in the component class with new FormControl() or with FormBuilder. The template input elements do not use ngModel. The associated Angular directives are all prefixed with Form such as FormGroup, FormControl, and FormControlName.  Reactive forms are powerful, flexible, and great for more complex data entry form scenarios such as dynamic generation of form controls.",
  "router": "Most applications consist of many screens or views. The user navigates among them by clicking links and buttons, and performing other similar actions that cause the application to replace one view with another. The Angular component router is a richly featured mechanism for configuring and managing the entire view navigation process including the creation and destruction of views. In most cases, components become attached to a router by means of a RouterConfig that defines routes to views. A routing component's template has a RouterOutlet element where it can display views produced by the router. Other views in the application likely have anchor tags or buttons with RouterLink directives that users can click to navigate. For more information, see the Routing & Navigation page.",
  "router-module": "A separate Angular module that provides the necessary service providers and directives for navigating through application views. For more information, see the Routing & Navigation page.",
  "routing-component": "An Angular component with a RouterOutlet that displays views based on router navigations. For more information, see the Routing & Navigation page.",
  "scoped-package": "Angular modules are delivered within scoped packages such as @angular/core, @angular/common, @angular/platform-browser-dynamic, @angular/http, and @angular/router. A scoped package is a way to group related npm packages. You import a scoped package the same way that you'd import a normal package. The only difference, from a consumer perspective, is that the scoped package name begins with the Angular scope name, @angular. import { Component } from '@angular/core';",
  "snake_case": "The practice of writing compound words or phrases such that an underscore (_) separates one word from the next. This form is also known as underscore case.",
  "service": "For data or logic that is not associated with a specific view or that you want to share across components, build services. Applications often require services such as a hero data service or a logging service. A service is a class with a focused purpose. We often create a service to implement features that are independent from any specific view, provide shared data or logic across components, or encapsulate external interactions. For more information, see the Services page of the Tour of Heroes tutorial.",
  "structural-directive": "A category of directive that can shape or reshape HTML layout, typically by adding, removing, or manipulating elements and their children; for example, the ngIf \"conditional element\" directive and the ngFor \"repeater\" directive. Read more in the Structural Directives page.",
  "template": "A template is a chunk of HTML that Angular uses to render a view with the support and continuing guidance of an Angular directive, most notably a component.",
  "template-driven-forms": "A technique for building Angular forms using HTML forms and input elements in the view. The alternate technique is Reactive Forms. When building template-driven forms:  The \"source of truth\" is the template. The validation is defined using attributes on the individual input elements. Two-way binding with ngModel keeps the component model in synchronization with the user's entry into the input elements. Behind the scenes, Angular creates a new control for each input element, provided you have set up a name attribute and two-way binding for each input. The associated Angular directives are all prefixed with ng such as ngForm, ngModel, and ngModelGroup.  Template-driven forms are convenient, quick, and simple. They are a good choice for many basic data entry form scenarios. Read about how to build template-driven forms in the Forms page.",
  "template-expression": "An expression is a TypeScript-like syntax that Angular evaluates within a data binding. Read about how to write template expressions in the Template Syntax page.",
  "transpile": "The process of transforming code written in one form of JavaScript (for example, TypeScript) into another form of JavaScript (for example, ES5).",
  "typescript": "A version of JavaScript that supports most ECMAScript 2015 language features such as decorators. TypeScript is also noteable for its optional typing system, which gives us compile-time type checking and strong tooling support (for example, \"intellisense\", code completion, refactoring, and intelligent search). Many code editors and IDEs support TypeScript either natively or with plugins. TypeScript is the preferred language for Angular development although you can use other JavaScript dialects such as ES5. Read more about TypeScript at typescript.org.",
  "view": "A view is a portion of the screen that displays information and responds to user actions such as clicks, mouse moves, and keystrokes. Angular renders a view under the control of one or more directives, especially component directives and their companion templates. The component plays such a prominent role that it's often convenient to refer to a component as a view. Views often contain other views and any view might be loaded and unloaded dynamically as the user navigates through the application, typically under the control of a router.",
  "zone": "Zones are a mechanism for encapsulating and intercepting a JavaScript application's asynchronous activity. The browser DOM and JavaScript have a limited number of asynchronous activities, activities such as DOM events (for example, clicks), promises, and XHR calls to remote servers. Zones intercept all of these activities and give a \"zone client\" the opportunity to take action before and after the async activity finishes. Angular runs your application in a zone where it can respond to asynchronous events by checking for data changes, and updating the information it displays via data bindings. Learn more about zones in this Brian Ford video.",
  "angularfour": "No much different than Angular 2, the \"4\" is just for semantic versioning.",
  "angularthree": "We skip Angular 3 in order to align with the version of the router.",
  "ngIf": "Removes or recreates a portion of the DOM tree based on an {expression}. If the expression assigned to ngIf evaluates to a falsy value then the element is removed from the DOM, otherwise a clone of the element is reinserted into the DOM.",
  "ngStyle": "Update an HTML element styles.",
  "ngFor": "The NgFor directive instantiates a template once per item from an iterable. The context for each instantiated template inherits from the outer context with the given loop variable set to the current item from the iterable.",
  "ngSwitch": "Adds / removes DOM sub-trees when the nest match expressions matches the switch expression.",
  "angularJS": "AngularJS is a structural framework for dynamic web apps. It lets you use HTML as your template language and lets you extend HTML's syntax to express your application's components clearly and succinctly. AngularJS is the predecessor of Angular 2.",
  "ngmodule": "An Angular Module is a class adorned with the @NgModule decorator function. @NgModule takes a metadata object that tells Angular how to compile and run module code. It identifies the module's own components, directives and pipes, making some of them public so external components can use them.",
  "animations": "Angular's animation system lets you build animations that run with the same kind of native performance found in pure CSS animations. You can also tightly integrate your animation logic with the rest of your application code, for ease of control.",
  "angulartwo": "Angular is a framework for building client applications in HTML and either JavaScript or a language like TypeScript that compiles to JavaScript.",
  "miško-hevery": "Miško Hevery is the creator of AngularJS framework. He has passion for making complex things simple. He currently works at Google, but has previously worked at Adobe, Sun Microsystems, Intel, and Xerox, where he became an expert in building web applications in web related technologies such as Java, JavaScript, Flex and ActionScript.",
  "igor-minar": "Igor is a software engineer at Google. He is a lead on the Angular project, practitioner of test driven development, open source enthusiast, hacker. In his free time, Igor enjoys spending time with his wife and two kids, doing outdoor activities (including but not limited to sports, gardening and building retaining walls).",
  "naomi-black": "Naomi is Angular's TPM generalist and jack-of-all-trades. She leads Angular's global programs (including localization), supports Angular's internal Google users, and acts as webmaster for angular.io and angular.cn. She's been at Google since 2006, as a technical program manager on projects ranging from Accessibility to Google Transit. She fights daleks in her spare time.",
  "brad-green": "Brad Green works at Google as an engineering director. Brad manages the Google Sales Platform suite of projects as well as the AngularJS framework. Prior to Google, Brad worked on the early mobile web at AvantGo, founded and sold startups, and spent a few hard years toiling as a caterer. Brad's first job out of school was as lackey to Steve Jobs at NeXT Computer writing demo software and designing his slide presentations. Brad enjoys throwing dinner parties with his wife Heather and putting on plays with his children.",
  "jules-kremer": "Jules is Head of Angular Developer Relations at Google. When not working with developers, Jules is often bending into pretzel-like shapes, climbing mountains or drinking really awesome beer.",
  "jeremy-elbourn": "Angular Material 2 Team Lead. FE Engineer @ Google specializing in AngularJS, component design, and the cleanest of code.",
  "pete-bacon-darwin": "Angular 1 for JS Team Lead. Pete has been working on the core team since 2012 and became the team lead for the Angular 1 for JS branch in November 2014. He has co-authored a book on AngularJS and regularly talks about and teaches Angular.",
  "thomas-burleson": "Angular Material 1.x and @angular/flex-layout Team Lead. Thomas joined the core team in 2014. He leads a team of developers working on UX components for Angular 1.x.",
  "stephen-fluin": "Stephen is a Developer Advocate working on the Angular team. Before joining Google, he was a Google Expert. Stephen loves to help enterprises use technology more effectively.",
  "rob-wormald": "Rob is a Developer Advocate on the Angular team at Google. He's the Angular team's resident reactive programming geek and founded the Reactive Extensions for Angular project, ngrx.",
  "aaron-zhang-(章小飞)": "Aaron is Angular's developer PM in China. He is the lead for angular.cn and social channels in China, and helps developers in China's enterprise and open source communities to be successful with Angular. One of the earliest Angular developers in China since 2012, he translated the first books on Angular into Chinese. Aaron joined the Google team in 2016.",
  "tobias-bosch": "Tobias Bosch is a software engineer at Google. He is part of the Angular core team and works on Angular.",
  "rado-kirov": "Rado has been on the Angular Core team since Summer 2014. Before Angular, he worked on the Adsense serving stack, responsible for serving billions of ads daily. Being passionate about open source, he made contributions to Angular as a Google-20% project, before making the fulltime jump. He is a recovering academic; ask him about error-correcting codes from algebraic curves (or don't).",
  "david-east": "David East is a Developer Programs Engineer at Google. He works full-time on the Firebase team and part-time on the Angular core team.",
  "alex-eagle": "Alex works on language tooling for JavaScript and TypeScript. Previously Alex spent five years in Google's developer testing tools. He has developed systems including Google's continuous integration service, capturing build&test failures, and explaining them to developers. Before Google, Alex worked at startups including Opower, and consulted for large government IT. In his 20% time, he created the Error-Prone static analysis tool, which detects common Java programming mistakes and reports them as compile errors.",
  "martin-probst": "Martin is a software engineer at Google in the AngularJS team. He holds a MSc in Software Engineering from HPI in Potsdam, Germany. Before joining the AngularJS team at Google, he worked at a database startup in the Netherlands, at EMC, at SAP, and as a freelancer. In his free time, he likes to cook and sail, not necessarily at the same time.",
  "julie-ralph": "Julie Ralph works as a Software Engineer in Test at Google in Seattle and is the lead developer on the Angular end-to-end testing framework Protractor.",
  "alex-rickabaugh": "Core team member working to optimize the Angular platform for the next generation of applications, including mobile. Before joining the Angular team, Alex worked in the Google sales organization where he helped build the first large Angular2 application within Google.",
  "ali-johnson": "I am a designer, illustrator, and biomedical engineer who loves combining creativity and science. Previously, I worked as a Cardiovascular Modeling and Simulation engineer where I built complex 3D and computational models of the human cardiovascular system based on patient-specific medical imaging data.",
  "matias-niemela": "Matias Niemela is a fullstack web developer who has been programming & building websites for over 10 years, and a core team member of AngularJS for two years. In the spring of 2015 Matias joined Angular full time at Google. In his free time Matias loves to build complex things and is always up for public speaking, travelling and tweaking his current Vim setup.",
  "hans-larsen": "Hans is a software engineer at Google on the Angular team and was previously at Slack. He works everyday to help make it easier for everyone to create beautiful, consistent web applications using Angular, using Material Design components and the CLI tool.",
  "lucas-mirelmann": "Lucas works as a Software Engineer at Google and is a core Angular contributor.",
  "kathy-walrath": "Kathy writes and edits docs about Dart and related technologies. Before Google, she worked at Sun, NeXT, and HP. Long ago, Kathy co-created and maintained The Java Tutorial.",
  "kara-erickson": "Kara is a software engineer on the Angular team at Google and a co-organizer of the Angular-SF Meetup. Prior to Google, she helped build UI components in Angular for guest management systems at OpenTable. She enjoys snacking indiscriminately and probably other things too.",
  "chuck-jazdzewski": "Chuck is a Software Engineer on the Angular team at Google. He is a programming language geek, UI framework and component library veteran, and has a passion for simplifying the task of programming. Before Google, he worked at Microsoft and Borland.",
  "vikram-subramanian": "Vikram is a Software Engineer on the Angular team focused on Engineering Productivity. That means he makes sure people on the team can move fast and not break things. Vikram enjoys doing Yoga and going on walks with his daughter.",
  "max-sills": "Max Sills is Angular's Open Source lawyer.",
  "shannon-ayres": "Shannon is a technical editor in Developer Relations at Google. She loves movies, especially Sunset Boulevard, and her favorite TV show is The Walking Dead. Her mission: Righting wrong writing!",
  "victor-savkin": "Victor has been on the Angular team since the inception of Angular 2. While at Google, Victor developed dependency injection, change detection, forms, and the router. Today he is a co-founder at nrwl.io.",
  "jeff-cross": "Jeff was one of the earliest core team members on Angular 1. He developed the Angular 2 http and AngularFire2 modules, contributed to RxJS 5, and was most recently the Tech Lead of the Angular Mobile team at Google. Jeff is a former Googler and co-founder at nrwl.io.",
  "alex-wolfe": "Alex built and designed the original angular.io website, and the reboot of the Angular logo. An X-Googler, Alex has been designing and building products for over 15 years and helped grow over 10 startups in the valley. Alex is an avid tennis player and a former Street Fighter 2 World Champion.",
  "marcy-sutton": "Marcy Sutton is a senior front-end engineer at Deque Systems, where she works on the axe-core team focusing on accessibility test integrations. Marcy is passionate about making the web accessible for everyone. She is a core team member to ngMaterial 1 and 2, where she regularly brings her accessibility expertise to the table–she is also a primary contributor to the ngAria module as well as an accessibility plugin for Protractor. She's in love with riding bicycles and snowboards and can often be found outside.",
  "shahar-talmi": "Shahar is a full-stack architect at Wix, leading Wix Angular and client infrastructure. He has been writing software ranging between kernel drivers, massive servers and casual games for the better part of his life. In the last couple of years he's developed a major crush on web applications development and specifically on Angular. Shahar is a big fan of TDD and is doing his best to promote it within the JavaScript community.",
  "pawel-kozlowski": "Open source hacker, AngularJS book author, AngularUI lead developer. Pawel is an software-development addict who believes in free, open source software. He is a core contributor to the AngularJS framework, AngularUI, Karma-runner and several other projects. He is the co-author of the \"Mastering Web Application Development with AngularJS\" book. When not coding, Pawel can be spotted speaking at various software development conferences.",
  "michał-gołębiowski": "Front-end developer at Laboratorium EE, core contributor to Angular & jQuery. Makes sure Angular 1 & jQuery work fine together. Interested in new JavaScript standards.",
  "jason-bedard": "Jason Bedard is a software engineer at Allocadia Software where he leads the front end development using Angular. In his spare time Jason enjoys contributing to projects such as Angular, drinking coffee and being in the outdoors with his wife.",
  "elad-bezalel": "Elad is a fullstack developer with a very strong love for design. Since 8 years old, he's been designing in Photoshop and later on fell in love with programing. This strong bond between design and computer programming gave birth to a new kind of love. And he is currently doing the combination of both, as a core member of the ngMaterial project.",
  "marc-laval": "Marc is a manager at Amadeus where he leads the team in charge of developing and recommending UI frameworks for the company. He is also an open source developer and a contributor to Angular.",
  "jeff-whelpley": "Chief Architect at GetHuman, panelist on Angular Air, co-organizer of the Boston Angular Meetup, full-stack JavaScript developer, soccer enthusiast and Boston College grad.",
  "patrick-stapleton": "Also know as PatrickJS where JS stands for his middle and last names. Patrick is very active in Open-Source with over 4,300+ contributions in the last year alone on projects such as Angular2, AngularJS, FalcorJS, Docker, Bootstrap, gulp, and redis to name a few. He is also working on the development of Angular server-side rendering as Universal Angular and teaching Modern Web Development at AngularClass. He was previously the CTO of Keychain Logistics, a HackReactor Instructor and Alum.",
  "pascal-precht": "Pascal is a front-end engineer, trainer and Google Developer Expert for Angular with a love for semantic markup and evolving technologies in the open web. He loves contributing to open source and is the creator of the popular angular-translate module. Pascal loves to travel the world and speaks at conferences and meetups. When he's not busy preparing the next workshop or conference talk, you might find him outside with his skateboard.",
  "ward-bell": "Ward is an all-around developer with JavaScript, node, and .net chops. He's a frequent conference speaker and podcaster, trainer, Google Developer Expert for Angular, Microsoft MVP, and PluralSight author. He is also president of IdeaBlade, an enterprise software consulting firm and the makers of breeze.js. He would like to get more sleep and spend more time in the mountains.",
  "john-papa": "John is a Google Developer Expert, Microsoft Regional Director and MVP, frequent author of courses for Pluralsight, a former technology Evangelist for Microsoft front end teams, and author of the popular Angular Style Guide. He can often be found speaking around the world at keynotes and sessions for many conferences. You can always find John at johnpapa.net or on twitter at @john_papa.",
  "martin-staffa": "Martin is an English major turned web developer who loves frontend stuff. He's been part of the Angular 1 team since 2014. If you can't find him roaming the Github issue queues, he's probably out with his camera somewhere.",
  "topher-fangio": "Topher loves the web and how it empowers new forms of creativity, connection and business. He is currently a core contributor on the Angular Material project and sometimes blogs about random things.",
  "filipe-silva": "Filipe is a passion-driven developer that always strives for the most elegant solution for each problem. He is currently an author for Angular.io, a core contributor for Angular-CLI and senior front end engineer at KonnectAgain. When not busy going through PRs, you can find him scouring reddit for new dinner recipes to cook or enjoying a craft beer in Dublin.",
  "tero-parviainen": "Tero is an independent software developer and writer. He's been building web applications for his whole professional career, and has almost figured out how to do vertical centering in CSS.",
  "deborah-kurata": "Deborah is an independent software developer and author. She is author of several Pluralsight courses including: 'Angular 2: Getting Started'",
  "jesús-rodríguez": "Jesus is an open source lover, a book author and editor, and AngularUI lead developer. He is currently a core contributor to the UI Bootstrap project.",
  "torgeir-helgevold": "Torgeir (Tor) is a front-end architect with a passion for JavaScript development. He is also an author for angular.io and an active tech blogger.",
  "fatima-remtullah": "Fatima is a Product Designer and Front-End Developer. When she is not nerding out she is probably eating an abundance of cookies.",
  "eric-jimenez": "Eric is a gamer, writer, and programmer.",
  "mike-ryan": "Mike Ryan is a Software Engineer at Synapse Wireless, working on solving challenging problems in the internet-of-things space. He is an advocate of reactive programming and a core contributor to the ngrx project.",
  "rex-ye": "Rex is a full-stack developer. He maintains the Angular.cn website with his old pal Ralph Wang and he plays a key role in bridging between the Chinese Angular community and the world-wide community. He loves playing with flashy new technologies and enjoys the challenge of mastering new skills. His biggest challenge to date is figuring out how to sooth a crying 4-month-old baby.",
  "ralph-wang": "Ralph(Zhicheng Wang) is a senior consultant at ThoughWorks and also a GDE. He is a technology enthusiast and he is a passionate advocate of “Simplicity, Professionalism and Sharing”. In his eighteen years of R&D career, he worked as tester, R&D engineer, project manager, product manager and CTO. He is looking forward to the birth of his baby.",
  "brandon-roberts": "Brandon is a front-end developer for a game studio developing web applications for STEM-based learning games. He is also a natural born troubleshooter who helps solve Angular issues on Github and Gitter support channels, particularly dealing with routing. He is also a member of the Angular docs team.",
  "kristiyan-kostadinov": "Kristiyan is a front-end developer, passionate open-source contributor and a core team member on Angular Material.",
  "georgios-kalpakas": "George is a Software Engineer with a passion for chess, robotics and automating stuff. He has a strong need to know how things work (so if you already know, he'd love to have a talk with you). He has been a member of the AngularJS team since 2014. When not doing geeky stuff, he is probably trying to convince his wife and kids to apply programming principles in real life. (Or is it the other way around?)",
  "kapunahele-wong": "Kapunahele is a front-end developer at Capital One. She loves just about anything to do with JavaScript, Angular and electronics. She enjoys mapping Hawaiian star names and constellations to Western ones and loves dancing native Hawaiian hula.",
  "paul-gschwendtner": "Paul is an aspiring 16-year-old developer living in Germany. While attending school, Paul works as a core team member on the Angular Material projects. He is a prolific contributor to all aspects of Angular 1 and Angular 2 and hopes to work at Google during his college studies!",
  "angularjs-bindings/interpolation": "In Angular, a template expression in curly braces still denotes one-way binding. This binds the value of the element to a property of the component. The context of the binding is implied and is always the associated component, so it needs no reference variable.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html",
  "angularjs-filters": "In Angular you use similar syntax with the pipe (|) character to filter output, but now you call them pipes. Many (but not all) of the built-in filters from Angular 1 are built-in pipes in Angular.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html",
  "angularjs-local-variables": "Angular has true template input variables that are explicitly defined using the let keyword.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html",
  "angularjs-ng-app": "Angular doesn't have a bootstrap directive. To launch the app in code, explicitly bootstrap the application's root module (AppModule) in main.ts and the application's root component (AppComponent) in app.module.ts.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html",
  "angularjs-ng-class": "In Angular, the ngClass directive works similarly. It includes/excludes CSS classes based on an expression.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html",
  "angularjs-ng-click": "Angular 1 event-based directives do not exist in Angular. Rather, define one-way binding from the template view to the component using event binding.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html",
  "angularjs-ng-controller": "In Angular, the template no longer specifies its associated controller. Rather, the component specifies its associated template as part of the component class decorator.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html",
  "angularjs-ng-hide": "In Angular, you use property binding; there is no built-in hide directive. For more information, see ng-show.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html",
  "angularjs-ng-href": "Angular, uses property binding; there is no built-in href directive. Place the element's href property in square brackets and set it to a quoted template expression.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html",
  "angularjs-ng-if": "The *ngIf directive in Angular works the same as the ng-if directive in Angular 1. It removes or recreates a portion of the DOM based on an expression.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html",
  "angularjs-ng-model": "In Angular, two-way binding is denoted by [()], descriptively referred to as a \"banana in a box\". This syntax is a shortcut for defining both property binding (from the component to the view) and event binding (from the view to the component), thereby providing two-way binding.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html",
  "angularjs-ng-repeat": "The *ngFor directive in Angular is similar to the ng-repeat directive in Angular 1. It repeats the associated DOM element for each item in the specified collection. More accurately, it turns the defined element (tr in this example) and its contents into a template and uses that template to instantiate a view for each item in the list.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html",
  "angularjs-ng-show": "Angular, uses property binding; there is no built-in show directive. For hiding and showing elements, bind to the HTML hidden property.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html",
  "angularjs-ng-src": "Angular, uses property binding; there is no built-in src directive. Place the src property in square brackets and set it to a quoted template expression.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html",
  "angularjs-ng-style": "In Angular, the ngStyle directive works similarly. It sets a CSS style on an HTML element based on an expression.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html",
  "angularjs-ng-switch": "In Angular, the ngSwitch directive works similarly. It displays an element whose *ngSwitchCase matches the current ngSwitch expression value.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html",
  "angularjs-currency": "The Angular currency pipe is similar although some of the parameters have changed.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html",
  "angularjs-date": "The Angular date pipe is similar.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html",
  "angularjs-filter": "For performance reasons, no comparable pipe exists in Angular. Do all your filtering in the component. If you need the same filtering code in several templates, consider building a custom pipe.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html",
  "angularjs-json": "The Angular json pipe does the same thing.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html",
  "angularjs-limitto": "The SlicePipe does the same thing but the order of the parameters is reversed, in keeping with the JavaScript Slice method. The first parameter is the starting index; the second is the limit. As in Angular 1, coding this operation within the component instead could improve performance.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html",
  "angularjs-lowercase": "The Angular lowercase pipe does the same thing.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html",
  "angularjs-number": "The Angular number pipe is similar. It provides more functionality when defining the decimal places, as shown in the second example above.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html",
  "angularjs-orderby": "For performance reasons, no comparable pipe exists in Angular. Instead, use component code to order or sort results. If you need the same ordering or sorting code in several templates, consider building a custom pipe.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html",
  "angularjs-iife": "You don't need to worry about this in Angular because you use ES 2015 modules and modules handle the namespacing for you.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html",
  "angularjs-angular-modules": "Angular modules, defined with the NgModule decorator, serve the same purpose:https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html",
  "angularjs-controller-registration": "Angular, adds a decorator to the component class to provide any required metadata. The Component decorator declares that the class is a component and provides metadata about that component such as its selector (or tag) and its template.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html",
  "angularjs-controller-function": "In Angular, you create a component class.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html",
  "angularjs-dependency-injection": "In Angular, you pass in dependencies as arguments to the component class constructor. This example injects a MovieService. The first parameter's TypeScript type tells Angular what to inject, even after minification.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html",
  "angularjs-link-tag": "In Angular, you can continue to use the link tag to define the styles for your application in the index.html file. But now you can also encapsulate styles for your components.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html"
}