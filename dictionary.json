{
  "ahead-of-time-aot-compilation": "You can compile Angular applications at build-time. By compiling your application using the compiler-cli, ngc, you can bootstrap directly to a module factory, meaning you don't need to include the Angular compiler in your JavaScript bundle. Ahead-of-time compiled applications also benefit from decreased load time and increased performance.https://angular.io/docs/ts/latest/guide/glossary.html#ahead-of-time-aot-compilation",
  "angular-module": "Helps you organize an application into cohesive blocks of functionality. An Angular module identifies the components, directives, and pipes that the application uses along with the list of external Angular modules that the application needs, such as FormsModule. Every Angular application has an application root module class. By convention, the class is called AppModule and resides in a file named app.module.ts. For details and examples, see the Angular Module page.https://angular.io/docs/ts/latest/guide/glossary.html#angular-module",
  "annotation": "In practice, a synonym for Decoration.https://angular.io/docs/ts/latest/guide/glossary.html#annotation",
  "attribute-directive": "A category of directive that can listen to and modify the behavior of other HTML elements, attributes, properties, and components. They are usually represented as HTML attributes, hence the name. A good example of an attribute directive is the ngClass directive for adding and removing CSS class names.https://angular.io/docs/ts/latest/guide/glossary.html#attribute-directive",
  "barrel": "A barrel is a way to rollup exports from several ES2015 modules into a single convenient ES2015 module. The barrel itself is an ES2015 module file that re-exports selected exports of other ES2015 modules. Imagine three ES2015 modules in a heroes folder: // heroes/hero.component.ts export class HeroComponent {} // heroes/hero.model.ts export class Hero {} // heroes/hero.service.ts export class HeroService {}Without a barrel, a consumer would need three import statements: import { HeroComponent } from '../heroes/hero.component.ts'; import { Hero } from '../heroes/hero.model.ts'; import { HeroService } from '../heroes/hero.service.ts';You can add a barrel to the heroes folder (called index, by convention) that exports all of these items: export * from './hero.model.ts'; // re-export all of its exports export * from './hero.service.ts'; // re-export all of its exports export { HeroComponent } from './hero.component.ts'; // re-export the named thingNow a consumer can import what it needs from the barrel. import { Hero, HeroService } from '../heroes'; // index is impliedThe Angular scoped packages each have a barrel named index. Note that you can often achieve this using Angular modules instead.https://angular.io/docs/ts/latest/guide/glossary.html#barrel",
  "binding": "Almost always refers to Data Binding and the act of binding an HTML object property to a data object property. May refer to a dependency injection binding between a \"token\", also referred to as a \"key\", and a dependency provider. This more rare usage should be clear in context.https://angular.io/docs/ts/latest/guide/glossary.html#binding",
  "bootstrap": "You launch an Angular application by \"bootstrapping\" it using the application root Angular module (AppModule). Bootstrapping identifies an application's top level \"root\" component, which is the first component that is loaded for the application. For more information, see the Setup page. You can bootstrap multiple apps in the same index.html, each with its own top level root.https://angular.io/docs/ts/latest/guide/glossary.html#bootstrap",
  "camelcase": "The practice of writing compound words or phrases such that each word or abbreviation begins with a capital letter except the first letter, which is lowercase. Function, property, and method names are typically spelled in camelCase. Examples include: square, firstName and getHeroes. Notice that square is an example of how you write a single word in camelCase. This form is also known as lower camel case, to distinguish it from upper camel case, which is PascalCase. When you see \"camelCase\" in this documentation it always means lower camel case.https://angular.io/docs/ts/latest/guide/glossary.html#camelcase",
  "component": "An Angular class responsible for exposing data to a view and handling most of the viewâ€™s display and user-interaction logic. The component is one of the most important building blocks in the Angular system. It is, in fact, an Angular directive with a companion template. You apply the @Component decorator to the component class, thereby attaching to the class the essential component metadata that Angular needs to create a component instance and render it with its template as a view. Those familiar with \"MVC\" and \"MVVM\" patterns will recognize the component in the role of \"controller\" or \"view model\".https://angular.io/docs/ts/latest/guide/glossary.html#component",
  "dash-case": "The practice of writing compound words or phrases such that each word is separated by a dash or hyphen (-). This form is also known as kebab-case. Directive selectors (like my-app) and the root of filenames (such as hero-list.component.ts) are often spelled in dash-case.https://angular.io/docs/ts/latest/guide/glossary.html#dash-case",
  "data-binding": "Applications display data values to a user and respond to user actions (clicks, touches, keystrokes). Instead of manually pushing application data values into HTML, attaching event listeners, pulling changed values from the screen, and updating application data values, you can use data binding by declaring the relationship between an HTML widget and data source and let the framework handle the details. Angular has a rich data binding framework with a variety of data binding operations and supporting declaration syntax.  Read about the forms of binding in the Template Syntax page:  Interpolation. Property binding. Event binding. Attribute binding. Class binding. Style binding. Two-way data binding with ngModel.https://angular.io/docs/ts/latest/guide/glossary.html#data-binding",
  "decorator-decoration": "A decorator is a function that adds metadata to a class, its members (properties, methods) and function arguments. Decorators are a JavaScript language feature, implemented in TypeScript and proposed for ES2016 (AKA ES7). To apply a decorator, position it immediately above or to the left of the thing it decorates. Angular has its own set of decorators to help it interoperate with your application parts. Here is an example of a @Component decorator that identifies a class as an Angular component and an @Input decorator applied to the name property of that component. The elided object argument to the @Component decorator would contain the pertinent component metadata. @Component({...}) export class AppComponent { constructor(@Inject('SpecialFoo') public foo:Foo) {} @Input() name:string; } The scope of a decorator is limited to the language feature that it decorates. None of the decorations shown here will \"leak\" to other classes appearing below it in the file. Always include parentheses () when applying a decorator.https://angular.io/docs/ts/latest/guide/glossary.html#decorator-decoration",
  "dependency-injection": "Dependency injection is both a design pattern and a mechanism for creating and delivering parts of an application to other parts of an application that request them. Angular developers prefer to build applications by defining many simple parts that each do one thing well and then wiring them together at runtime. These parts often rely on other parts. An Angular component part might rely on a service part to get data or perform a calculation. When part \"A\" relies on another part \"B\", you say that \"A\" depends on \"B\" and that \"B\" is a dependency of \"A\". You can ask a \"dependency injection system\" to create \"A\" for us and handle all the dependencies. If \"A\" needs \"B\" and \"B\" needs \"C\", the system resolves that chain of dependencies and returns a fully prepared instance of \"A\". Angular provides and relies upon its own sophisticated dependency injection system to assemble and run applications by \"injecting\" application parts into other application parts where and when needed. At the core there is an injector that returns dependency values on request. The expression injector.get(token) returns the value associated with the given token. A token is an Angular type (OpaqueToken). You rarely deal with tokens directly; most methods accept a class name (Foo) or a string (\"foo\") and Angular converts it to a token. When you write injector.get(Foo), the injector returns the value associated with the token for the Foo class, typically an instance of Foo itself. During many of its operations, Angular makes similar requests internally, such as when it creates a component for display. The Injector maintains an internal map of tokens to dependency values. If the Injector can't find a value for a given token, it creates a new value using a Provider for that token. A provider is a recipe for creating new instances of a dependency value associated with a particular token. An injector can only create a value for a given token if it has a provider for that token in its internal provider registry. Registering providers is a critical preparatory step. Angular registers some of its own providers with every injector. We can register our own providers. Read more in the Dependency Injection page.https://angular.io/docs/ts/latest/guide/glossary.html#dependency-injection",
  "directive": "An Angular class responsible for creating, reshaping, and interacting with HTML elements in the browser DOM. Directives are Angular's most fundamental feature. A Directive is almost always associated with an HTML element or attribute. We often refer to such an element or attribute as the directive itself. When Angular finds a directive in an HTML template, it creates the matching directive class instance and gives the instance control over that portion of the browser DOM. You can invent custom HTML markup (for example, <my-directive>) to associate with your custom directives. You add this custom markup to HTML templates as if you were writing native HTML. In this way, directives become extensions of HTML itself. Directives fall into one of three categories:  Components that combine application logic with an HTML template to render application [views]. Components are usually represented as HTML elements. They are the building blocks of an Angular application and the developer can expect to write a lot of them.  Attribute directives that can listen to and modify the behavior of other HTML elements, attributes, properties, and components. They are usually represented as HTML attributes, hence the name.  Structural directives, a directive responsible for shaping or reshaping HTML layout, typically by adding, removing, or manipulating elements and their children.https://angular.io/docs/ts/latest/guide/glossary.html#directive",
  "ecmascript": "The official JavaScript language specification. The latest approved version of JavaScript is ECMAScript 2016 (AKA \"ES2016\" or \"ES7\") and many Angular developers write their applications either in this version of the language or a dialect that strives to be compatible with it, such as TypeScript. Most modern browsers today only support the much older \"ECMAScript 5\" (AKA ES5) standard. Applications written in ES2016, ES2015 or one of their dialects must be \"transpiled\" to ES5 JavaScript. Angular developers may choose to write in ES5 directly.https://angular.io/docs/ts/latest/guide/glossary.html#ecmascript",
  "es2015": "Short hand for ECMAScript 2015.https://angular.io/docs/ts/latest/guide/glossary.html#es2015",
  "es6": "Short hand for ECMAScript 2015.https://angular.io/docs/ts/latest/guide/glossary.html#es6",
  "es5": "Short hand for ECMAScript 5, the version of JavaScript run by most modern browsers. See ECMAScript.https://angular.io/docs/ts/latest/guide/glossary.html#es5",
  "injector": "An object in the Angular dependency injection system that can find a named \"dependency\" in its cache or create such a thing with a registered provider.https://angular.io/docs/ts/latest/guide/glossary.html#injector",
  "input": "A directive property that can be the target of a property binding (explained in detail in the Template Syntax page). Data values flow into this property from the data source identified in the template expression to the right of the equal sign. See the Input and output properties section of the Template Syntax page.https://angular.io/docs/ts/latest/guide/glossary.html#input",
  "interpolation": "A form of property data binding in which a template expression between double-curly braces renders as text. That text may be concatenated with neighboring text before it is assigned to an element property or displayed between element tags, as in this example. My current hero is {{hero.name}} Read more about interpolation in the Template Syntax page.https://angular.io/docs/ts/latest/guide/glossary.html#interpolation",
  "just-in-time-jit-compilation": "With Angular just-in-time bootstrapping you compile your components and modules in the browser and launch the application dynamically. This is a good choice during development. Consider using the ahead-of-time mode for production apps.https://angular.io/docs/ts/latest/guide/glossary.html#just-in-time-jit-compilation",
  "kebab-case": "See dash-case.https://angular.io/docs/ts/latest/guide/glossary.html#kebab-case",
  "lifecycle-hooks": "Directives and components have a lifecycle managed by Angular as it creates, updates, and destroys them. You can tap into key moments in that lifecycle by implementing one or more of the lifecycle hook interfaces. Each interface has a single hook method whose name is the interface name prefixed with ng. For example, the OnInit interface has a hook method named ngOnInit. Angular calls these hook methods in the following order:  ngOnChanges - when an input/output binding value changes. ngOnInit - after the first ngOnChanges. ngDoCheck - developer's custom change detection. ngAfterContentInit - after component content initialized. ngAfterContentChecked - after every check of component content. ngAfterViewInit - after component's view(s) are initialized. ngAfterViewChecked - after every check of a component's view(s). ngOnDestroy - just before the directive is destroyed.  Read more in the Lifecycle Hooks page.https://angular.io/docs/ts/latest/guide/glossary.html#lifecycle-hooks",
  "module": "In Angular, there are two types of modules:  Angular modules. For details and examples, see the Angular Modules page. ES2015 modules, as described in this section.  Angular apps are modular. In general, you assemble your application from many modules, both the ones you write and the ones you acquire from others. A typical module is a cohesive block of code dedicated to a single purpose. A module exports something of value in that code, typically one thing such as a class. A module that needs that thing, imports it. The structure of Angular modules and the import/export syntax is based on the ES2015 module standard. An application that adheres to this standard requires a module loader to load modules on request, and resolve inter-module dependencies. Angular does not ship with a module loader and does not have a preference for any particular 3rd party library (although most examples use SystemJS). You may pick any module library that conforms to the standard. Modules are typically named after the file in which the exported thing is defined. The Angular DatePipe class belongs to a feature module named date_pipe in the file date_pipe.ts. You rarely access Angular feature modules directly. You usually import them from one of the Angular scoped packages such as @angular/core.https://angular.io/docs/ts/latest/guide/glossary.html#module",
  "observable": "You can think of an observable as an array whose items arrive asynchronously over time. Observables help you manage asynchronous data, such as data coming from a backend service. Observables are used within Angular itself, including Angular's event system and its http client service. To use observables, Angular uses a third-party library called Reactive Extensions (RxJS). Observables are a proposed feature for ES 2016, the next version of JavaScript.https://angular.io/docs/ts/latest/guide/glossary.html#observable",
  "output": "A directive property that can be the target of event binding. Events stream out of this property to the receiver identified in the template expression to the right of the equal sign. See the Input and output properties section of the Template Syntax page.https://angular.io/docs/ts/latest/guide/glossary.html#output",
  "pascalcase": "The practice of writing individual words, compound words, or phrases such that each word or abbreviation begins with a capital letter. Class names are typically spelled in PascalCase. Examples include: Person and HeroDetailComponent. This form is also known as upper camel case to distinguish it from lower camel case, which is simply called camelCase. In this documentation, \"PascalCase\" means upper camel case and \"camelCase\" means lower camel case.https://angular.io/docs/ts/latest/guide/glossary.html#pascalcase",
  "pipe": "An Angular pipe is a function that transforms input values to output values for display in a view. Use the @Pipe decorator to associate the pipe function with a name. You then use that name in your HTML to declaratively transform values on screen. Here's an example that uses the built-in currency pipe to display a numeric value in the local currency. Price: {{product.price | currency}}Read more in the page on pipes.https://angular.io/docs/ts/latest/guide/glossary.html#pipe",
  "provider": "A provider creates a new instance of a dependency for the dependency injection system. It relates a lookup token to codeâ€”sometimes called a \"recipe\"â€”that can create a dependency value.https://angular.io/docs/ts/latest/guide/glossary.html#provider",
  "reactive-forms": "A technique for building Angular forms through code in a component. The alternate technique is Template-Driven Forms. When building reactive forms:  The \"source of truth\" is the component. The validation is defined using code in the component. Each control is explicitly created in the component class with new FormControl() or with FormBuilder. The template input elements do not use ngModel. The associated Angular directives are all prefixed with Form such as FormGroup, FormControl, and FormControlName.  Reactive forms are powerful, flexible, and great for more complex data entry form scenarios such as dynamic generation of form controls.https://angular.io/docs/ts/latest/guide/glossary.html#reactive-forms",
  "router": "Most applications consist of many screens or views. The user navigates among them by clicking links and buttons, and performing other similar actions that cause the application to replace one view with another. The Angular component router is a richly featured mechanism for configuring and managing the entire view navigation process including the creation and destruction of views. In most cases, components become attached to a router by means of a RouterConfig that defines routes to views. A routing component's template has a RouterOutlet element where it can display views produced by the router. Other views in the application likely have anchor tags or buttons with RouterLink directives that users can click to navigate. For more information, see the Routing & Navigation page.https://angular.io/docs/ts/latest/guide/glossary.html#router",
  "router-module": "A separate Angular module that provides the necessary service providers and directives for navigating through application views. For more information, see the Routing & Navigation page.https://angular.io/docs/ts/latest/guide/glossary.html#router-module",
  "routing-component": "An Angular component with a RouterOutlet that displays views based on router navigations. For more information, see the Routing & Navigation page.https://angular.io/docs/ts/latest/guide/glossary.html#routing-component",
  "scoped-package": "Angular modules are delivered within scoped packages such as @angular/core, @angular/common, @angular/platform-browser-dynamic, @angular/http, and @angular/router. A scoped package is a way to group related npm packages. You import a scoped package the same way that you'd import a normal package. The only difference, from a consumer perspective, is that the scoped package name begins with the Angular scope name, @angular. import { Component } from '@angular/core';https://angular.io/docs/ts/latest/guide/glossary.html#scoped-package",
  "snake_case": "The practice of writing compound words or phrases such that an underscore (_) separates one word from the next. This form is also known as underscore case.https://angular.io/docs/ts/latest/guide/glossary.html#snake_case",
  "service": "For data or logic that is not associated with a specific view or that you want to share across components, build services. Applications often require services such as a hero data service or a logging service. A service is a class with a focused purpose. We often create a service to implement features that are independent from any specific view, provide shared data or logic across components, or encapsulate external interactions. For more information, see the Services page of the Tour of Heroes tutorial.https://angular.io/docs/ts/latest/guide/glossary.html#service",
  "structural-directive": "A category of directive that can shape or reshape HTML layout, typically by adding, removing, or manipulating elements and their children; for example, the ngIf \"conditional element\" directive and the ngFor \"repeater\" directive. Read more in the Structural Directives page.https://angular.io/docs/ts/latest/guide/glossary.html#structural-directive",
  "template": "A template is a chunk of HTML that Angular uses to render a view with the support and continuing guidance of an Angular directive, most notably a component.https://angular.io/docs/ts/latest/guide/glossary.html#template",
  "template-driven-forms": "A technique for building Angular forms using HTML forms and input elements in the view. The alternate technique is Reactive Forms. When building template-driven forms:  The \"source of truth\" is the template. The validation is defined using attributes on the individual input elements. Two-way binding with ngModel keeps the component model in synchronization with the user's entry into the input elements. Behind the scenes, Angular creates a new control for each input element, provided you have set up a name attribute and two-way binding for each input. The associated Angular directives are all prefixed with ng such as ngForm, ngModel, and ngModelGroup.  Template-driven forms are convenient, quick, and simple. They are a good choice for many basic data entry form scenarios. Read about how to build template-driven forms in the Forms page.https://angular.io/docs/ts/latest/guide/glossary.html#template-driven-forms",
  "template-expression": "An expression is a TypeScript-like syntax that Angular evaluates within a data binding. Read about how to write template expressions in the Template Syntax page.https://angular.io/docs/ts/latest/guide/glossary.html#template-expression",
  "transpile": "The process of transforming code written in one form of JavaScript (for example, TypeScript) into another form of JavaScript (for example, ES5).https://angular.io/docs/ts/latest/guide/glossary.html#transpile",
  "typescript": "A version of JavaScript that supports most ECMAScript 2015 language features such as decorators. TypeScript is also noteable for its optional typing system, which gives us compile-time type checking and strong tooling support (for example, \"intellisense\", code completion, refactoring, and intelligent search). Many code editors and IDEs support TypeScript either natively or with plugins. TypeScript is the preferred language for Angular development although you can use other JavaScript dialects such as ES5. Read more about TypeScript at typescript.org.https://angular.io/docs/ts/latest/guide/glossary.html#typescript",
  "view": "A view is a portion of the screen that displays information and responds to user actions such as clicks, mouse moves, and keystrokes. Angular renders a view under the control of one or more directives, especially component directives and their companion templates. The component plays such a prominent role that it's often convenient to refer to a component as a view. Views often contain other views and any view might be loaded and unloaded dynamically as the user navigates through the application, typically under the control of a router.https://angular.io/docs/ts/latest/guide/glossary.html#view",
  "zone": "Zones are a mechanism for encapsulating and intercepting a JavaScript application's asynchronous activity. The browser DOM and JavaScript have a limited number of asynchronous activities, activities such as DOM events (for example, clicks), promises, and XHR calls to remote servers. Zones intercept all of these activities and give a \"zone client\" the opportunity to take action before and after the async activity finishes. Angular runs your application in a zone where it can respond to asynchronous events by checking for data changes, and updating the information it displays via data bindings. Learn more about zones in this Brian Ford video.https://angular.io/docs/ts/latest/guide/glossary.html#zone",
  "angularfour": "No much different than Angular 2, the \"4\" is just for semantic versioning.",
  "angularthree": "We skip Angular 3 in order to align with the version of the router.",
  "ngFor": "The NgFor directive instantiates a template once per item from an iterable. The context for each instantiated template inherits from the outer context with the given loop variable set to the current item from the iterable.https://angular.io/docs/ts/latest/api/common/index/NgFor-directive.html",
  "ngmodule": "An Angular Module is a class adorned with the @NgModule decorator function. @NgModule takes a metadata object that tells Angular how to compile and run module code. It identifies the module's own components, directives and pipes, making some of them public so external components can use them.https://angular.io/docs/ts/latest/guide/ngmodule.html",
  "animations": "Angular's animation system lets you build animations that run with the same kind of native performance found in pure CSS animations. You can also tightly integrate your animation logic with the rest of your application code, for ease of control.https://angular.io/docs/ts/latest/guide/animations.html",
  "angulartwo": "Angular is a framework for building client applications in HTML and either JavaScript or a language like TypeScript that compiles to JavaScript.",
  "angularjs-bindings/interpolation": "In Angular, a template expression in curly braces still denotes one-way binding. This binds the value of the element to a property of the component. The context of the binding is implied and is always the associated component, so it needs no reference variable.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html#bindings/interpolation",
  "angularjs-filters": "In Angular you use similar syntax with the pipe (|) character to filter output, but now you call them pipes. Many (but not all) of the built-in filters from Angular 1 are built-in pipes in Angular.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html#filters",
  "angularjs-local-variables": "Angular has true template input variables that are explicitly defined using the let keyword.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html#local-variables",
  "angularjs-ng-app": "Angular doesn't have a bootstrap directive. To launch the app in code, explicitly bootstrap the application's root module (AppModule) in main.ts and the application's root component (AppComponent) in app.module.ts.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html#ng-app",
  "angularjs-ng-class": "In Angular, the ngClass directive works similarly. It includes/excludes CSS classes based on an expression.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html#ng-class",
  "angularjs-ng-click": "Angular 1 event-based directives do not exist in Angular. Rather, define one-way binding from the template view to the component using event binding.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html#ng-click",
  "angularjs-ng-controller": "In Angular, the template no longer specifies its associated controller. Rather, the component specifies its associated template as part of the component class decorator.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html#ng-controller",
  "angularjs-ng-hide": "In Angular, you use property binding; there is no built-in hide directive. For more information, see ng-show.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html#ng-hide",
  "angularjs-ng-href": "Angular, uses property binding; there is no built-in href directive. Place the element's href property in square brackets and set it to a quoted template expression.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html#ng-href",
  "angularjs-ng-if": "The *ngIf directive in Angular works the same as the ng-if directive in Angular 1. It removes or recreates a portion of the DOM based on an expression.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html#ng-if",
  "angularjs-ng-model": "In Angular, two-way binding is denoted by [()], descriptively referred to as a \"banana in a box\". This syntax is a shortcut for defining both property binding (from the component to the view) and event binding (from the view to the component), thereby providing two-way binding.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html#ng-model",
  "angularjs-ng-repeat": "The *ngFor directive in Angular is similar to the ng-repeat directive in Angular 1. It repeats the associated DOM element for each item in the specified collection. More accurately, it turns the defined element (tr in this example) and its contents into a template and uses that template to instantiate a view for each item in the list.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html#ng-repeat",
  "angularjs-ng-show": "Angular, uses property binding; there is no built-in show directive. For hiding and showing elements, bind to the HTML hidden property.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html#ng-show",
  "angularjs-ng-src": "Angular, uses property binding; there is no built-in src directive. Place the src property in square brackets and set it to a quoted template expression.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html#ng-src",
  "angularjs-ng-style": "In Angular, the ngStyle directive works similarly. It sets a CSS style on an HTML element based on an expression.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html#ng-style",
  "angularjs-ng-switch": "In Angular, the ngSwitch directive works similarly. It displays an element whose *ngSwitchCase matches the current ngSwitch expression value.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html#ng-switch",
  "angularjs-currency": "The Angular currency pipe is similar although some of the parameters have changed.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html#currency",
  "angularjs-date": "The Angular date pipe is similar.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html#date",
  "angularjs-filter": "For performance reasons, no comparable pipe exists in Angular. Do all your filtering in the component. If you need the same filtering code in several templates, consider building a custom pipe.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html#filter",
  "angularjs-json": "The Angular json pipe does the same thing.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html#json",
  "angularjs-limitto": "The SlicePipe does the same thing but the order of the parameters is reversed, in keeping with the JavaScript Slice method. The first parameter is the starting index; the second is the limit. As in Angular 1, coding this operation within the component instead could improve performance.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html#limitto",
  "angularjs-lowercase": "The Angular lowercase pipe does the same thing.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html#lowercase",
  "angularjs-number": "The Angular number pipe is similar. It provides more functionality when defining the decimal places, as shown in the second example above.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html#number",
  "angularjs-orderby": "For performance reasons, no comparable pipe exists in Angular. Instead, use component code to order or sort results. If you need the same ordering or sorting code in several templates, consider building a custom pipe.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html#orderby",
  "angularjs-iife": "You don't need to worry about this in Angular because you use ES 2015 modules and modules handle the namespacing for you.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html#iife",
  "angularjs-angular-modules": "Angular modules, defined with the NgModule decorator, serve the same purpose:https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html#angular-modules",
  "angularjs-controller-registration": "Angular, adds a decorator to the component class to provide any required metadata. The Component decorator declares that the class is a component and provides metadata about that component such as its selector (or tag) and its template.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html#controller-registration",
  "angularjs-controller-function": "In Angular, you create a component class.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html#controller-function",
  "angularjs-dependency-injection": "In Angular, you pass in dependencies as arguments to the component class constructor. This example injects a MovieService. The first parameter's TypeScript type tells Angular what to inject, even after minification.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html#dependency-injection",
  "angularjs-link-tag": "In Angular, you can continue to use the link tag to define the styles for your application in the index.html file. But now you can also encapsulate styles for your components.https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html#link-tag",
  "ChangeDetectionStrategy ": "Describes within the change detector which strategy will be used the next time change detection is triggered. You can learn more https://angular.io/docs/ts/latest/api/core/index/ChangeDetectionStrategy-enum.html",
  "oninit": "Lifecycle hook that is called after data-bound properties of a directive are initialized.https://angular.io/docs/ts/latest/api/core/index/OnInit-class.html",
  "MVVM": "Modelâ€“viewâ€“view-model (MVVM) is a software architectural pattern. MVVM facilitates a separation of development of the graphical user interface â€“ be it via a markup language or GUI code â€“ from development of the business logic or back-end logic (the data model).https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel",
  "MVC": "Modelâ€“viewâ€“controller (MVC) is a software design pattern for implementing user interfaces on computers. It divides a given software application into three interconnected parts, so as to separate internal representations of information from the ways that information is presented to or accepted from the user.https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller",
  "rxjs": "RxJS (\"Reactive Extensions\") is a 3rd party library, endorsed by Angular, that implements the asynchronous observable pattern.https://angular.io/docs/ts/latest/guide/server-communication.html#!#rxjs",
  "ionic": "Mobile SDK for developing native and progressive web apps with ease.https://ionicframework.com/docs/",
  "ondestroy": "Lifecycle hook that is called when a directive, pipe or service is destroyed.https://angular.io/docs/ts/latest/api/core/index/OnDestroy-class.html",
  "onchanges": "Lifecycle hook that is called when any data-bound property of a directive changes.https://angular.io/docs/ts/latest/api/core/index/OnChanges-class.html",
  "ngzone": "An injectable service for executing work inside or outside of the Angular zone.https://angular.io/docs/ts/latest/api/core/index/NgZone-class.html",
  "ngmoduleref": "Represents an instance of an NgModule created via a NgModuleFactory. NgModuleRef provides access to the NgModule Instance as well other objects related to this NgModule Instance.https://angular.io/docs/ts/latest/api/core/index/NgModuleRef-class.html",
  "zonejs": "A Zone is an execution context that persists across async tasks. You can think of it as thread-local storage for JavaScript VMs.https://github.com/angular/zone.js/",
  "onpush": "OnPush means that the change detector's mode will be set to CheckOnce during hydration.",
  "viewchild": "You can use ViewChild to get the first element or the directive matching the selector from the view DOM. If the view DOM changes, and a new child matches the selector, the property will be updated.https://angular.io/docs/ts/latest/api/core/index/ViewChild-decorator.html",
  "errorhandler": "The default implementation of ErrorHandler prints error messages to the console. To intercept error handling, write a custom exception handler that replaces this default as appropriate for your app.https://angular.io/docs/ts/latest/api/core/index/ErrorHandler-class.html",
  "bindtocontroller": " Component inputs and outputs should be bound to the controller instead of using the $scope.",
  "apply": " While change detection still occurs after every event, no one needs to call scope.$apply() for that to happen. This is because all Angular 2 code runs inside something called the Angular zone. Angular always knows when the code finishes, so it also knows when it should kick off change detection. The code itself doesn't have to call scope.$apply() or anything like it.https://angular.io/docs/ts/latest/guide/upgrade.html#!#change-detection",
  "viewcontainerref": "Represents a container where one or more Views can be attached. The container can contain two kinds of Views. Host Views, created by instantiating a Component via createComponent, and Embedded Views, created by instantiating an Embedded Template via createEmbeddedView.https://angular.io/docs/ts/latest/api/core/index/ViewContainerRef-class.html",
  "httpmodule": "The HttpModule is not a core Angular module. It's Angular's optional approach to web access and it exists as a separate add-on module called @angular/http, shipped in a separate script file as part of the Angular npm package.https://angular.io/docs/ts/latest/tutorial/toh-pt6.html",
  "universal": "Angular Universal is a library that can be used to render an Angular 2 app on the server. https://github.com/angular/universal/blob/master/DOCUMENTATION.md",
  "two-way-binding": "We often want to both display a data property and update that property when the user makes changes. On the element side that takes a combination of setting a specific element property and listening for an element change event. Angular offers a special two-way data binding syntax for this purpose, [(x)]. The [(x)] syntax combines the brackets of property binding, [x], with the parentheses of event binding, (x).https://angular.io/docs/ts/latest/guide/template-syntax.html#!#two-way",
  "tsconfig": "Browsers can't execute TypeScript directly. Typescript must be \"transpiled\" into JavaScript using the tsc compiler, which requires some configuration. Typically, you add a TypeScript configuration file (tsconfig.json) to your project to guide the compiler as it generates JavaScript files.https://angular.io/docs/ts/latest/guide/typescript-configuration.html",
  "migration": "Check the detailed guide on how to upgrade on the latest version: https://angular.io/docs/ts/latest/guide/upgrade.html",
  "component-angular-module": "You write Angular applications by composing HTML templates with Angularized markup, writing component classes to manage those templates, adding application logic in services, and boxing components and services in modules.",
  "component-directive": "Components are the most common of the three directives - components, structural directives and attribute directives.",
  "service-provider": "A service is nothing more than a class in Angular. It remains nothing more than a class until we register it with an Angular injector. A provider provides the concrete, runtime version of a dependency value. The injector relies on providers to create instances of the services that the injector injects into components and other services.",
  "service-class": "A service is nothing more than a class in Angular. It remains nothing more than a class until we register it with an Angular injector.",
  "class-angular-module": "The Angular module â€” a class decorated with @NgModule â€” is a fundamental feature of Angular.https://angular.io/docs/ts/latest/guide/architecture.html#!#angular-modules-vs-javascript-modules",
  "angulartwo-angularJs": "AngularJS is the predecessor of Angular 2.",
  "angulartwo-angularthree": "We skip Angular 3 in order to align with the version of the router and will move directly to Angular 4",
  "angulartwo-angularfour": "No much different than Angular 2, the \"4\" is just for semantic versioning.",
  "version": "The latest Angular release is 2.4. Learn about the latest updates to the documentation. View the Angular change log for enhancements, fixes, and breaking changes in Angular itself.https://angular.io/docs/ts/latest/",
  "angularjs": "AngularJS is a structural framework for dynamic web apps. It lets you use HTML as your template language and lets you extend HTML's syntax to express your application's components clearly and succinctly. AngularJS is the predecessor of Angular 2.",
  "angulartwo-react": "Angular is a development platform. React is a JavaScript library for building user interfaces.",
  "angularfour-react": "Angular is a development platform. React is a JavaScript library for building user interfaces.",
  "change-detection": "By using dirty checking Angular detects changes in the state of the user interface. Later based on the detected changes, the framework updates the view.",
  "$digest": "In AngularJS after evaluating the expression, the $apply method performs a $digest. In the $digest phase the scope examines all of the $watch expressions and compares them with the previous value. "
}